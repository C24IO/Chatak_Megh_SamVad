%!PS-Adobe-3.0
%%Title: LinuxTutorialPosixThreads.txt
%%For: root
%%Creator: a2ps version 4.13
%%CreationDate: Sun Mar 27 21:01:28 2005
%%BoundingBox: 24 24 588 768
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 8
%%PageOrder: Ascend
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Define these in case they're not in the FontInfo (also, here
    % they're easier to get to.
    /UnderlinePosition 1 def
    /UnderlineThickness 1 def
    
    % Get the underline position and thickness if they're defined.
    currentdict /FontInfo known {
      FontInfo
      
      dup /UnderlinePosition known {
	dup /UnderlinePosition get
	0 exch FontMatrix transform exch pop
	/UnderlinePosition exch def
      } if
      
      dup /UnderlineThickness known {
	/UnderlineThickness get
	0 exch FontMatrix transform exch pop
	/UnderlineThickness exch def
      } if
      
    } if
    currentdict 
  end 
} bind def

% composite fonts for ASCII-EUC mixed strings
% Version 1.2 1/31/1990
% Original Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 612 def
/sw 792 def
/llx 24 def
/urx 768 def
/ury 588 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 7.493857 def
/cw 4.496314 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   522.321860 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(------------------------------------------------------------------------) p n
() N
() N
(  YoLinux Tutorial: POSIX thread \(pthread\) libraries) N
() N
(The POSIX thread libraries are a standards based thread API for C/C++.) N
(It allows one to spawn a new concurrent process flow. It is most) N
(effective on multiprocessor systems where the process flow can be) N
(scheduled to run on another processor thus gaining speed through) N
(parallel or distributed processing. Threads require less overhead than) N
("forking" or spawning a new process because the system does not) N
(initialize a new system virtual memory space and environment for the) N
(process. While most effective on a multiprocessor system, gains are also) N
(found on uniprocessor systems which exploit latency in I/O and other) N
(system functions which may halt process execution. \(One thread may) N
(execute while another is waiting for I/O or some other system latency.\)) N
(Parallel programming technologies such as MPI and PVM are used in a) N
(distributed computing environment while threads are limited to a single) N
(computer system. All threads within a process share the same address) N
(space. A thread is spawned by defining a function and it's arguments) N
(which will be processed in the thread. The purpose of using the POSIX) N
(thread library in your software is to execute software faster.) N
() N
(*Contents:*) N
() N
(    * Thread Basics <#BASICS>) N
(    * Thread Creation and Termination <#CREATIONTERMINATION>) N
(    * Thread Synchronization <#SYNCHRONIZATION>) N
(    * Thread Scheduling <#SCHEDULING>) N
(    * Thread Pitfalls <#PITFALLS>) N
(    * Thread Debugging <#DEBUGGING>) N
(    * Thread Man Pages <#MANPAGES>) N
(    * Links <#LINKS>) N
(    * Books <#BOOKS> ) N
() N
() S 8 T (<http://www.burstnet.com/ads/ad9427a-map.cgi/SZ=468X60A|728X90A/V=2.0S/B) N
(RC=87087/BCPG17839.36667.38033/>) N
() N
() N
(------------------------------------------------------------------------) N
() N
(*YoLinux Programming Tutorials:*) N
() N
(    * *C++ on Linux <LinuxTutorialC++.html>*) N
(    * *C++ STL \(Standard Template Library\) example of a linked list) N
(      using a list <LinuxTutorialC++STL.html>*) N
(    * *C++ string class examples <LinuxTutorialC++StringClass.html>*) N
(    * *X-emacs and C++ development <LinuxTutorialXemacs.html>*) N
(    * *C++ Structure Example and Tutorial) N
(      <LinuxTutorialC++Structures.html>*) N
(    * *Linux software development tutorial) N
(      <LinuxTutorialSoftwareDevelopment.html>* ) N
() N
(<http://www.burstnet.com/ads/sk9427a-map.cgi/SZ=120X600A|160X600A/V=2.0S/BRC=946) N
(11/BCPG17840.42667.38056/>) N
() N
() N
() S 8 T () N
(*Thread Basics:*) N
() N
(    * Thread operations include thread creation, termination,) N
(      synchronization \(joins,blocking\), scheduling, data management and) N
(      process interaction.) N
(    * A thread does not maintain a list of created threads, nor does it) N
(      know the thread that created it.) N
(    * All threads within a process share the same address space.) N
(    * Threads in the same process share:) N
(          o Process instructions) N
(          o Most data) N
(LinuxTutorialPosixThreads.txt) (Page 1/15) (Mar 27, 05 20:57) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(          o open files \(descriptors\)) p n
(          o signals and signal handlers) N
(          o current working directory) N
(          o User and group id ) N
(    * Each thread has a unique:) N
(          o Thread ID) N
(          o set of registers, stack pointer) N
(          o stack for local variables, return addresses) N
(          o signal mask) N
(          o priority) N
(          o Return value: errno ) N
(    * pthread functions return "0" if ok. ) N
() N
(------------------------------------------------------------------------) N
(*Thread Creation and Termination:*) N
() N
(Example: pthread1.c) N
() N
(#include <stdio.h>) N
(#include <stdlib.h>) N
(#include <pthread.h>) N
() N
(void *print_message_function\( void *ptr \);) N
() N
(main\(\)) N
({) N
(     pthread_t thread1, thread2;) N
(     char *message1 = "Thread 1";) N
(     char *message2 = "Thread 2";) N
(     int  iret1, iret2;) N
() N
(    /* Create independant threads each of which will execute function */) N
() N
(     iret1 = pthread_create <http://www2.yo-linux.com/cgi-bin/man.cgi?section=al) N
(l&topic=pthread_create>\( &thread1, NULL, print_message_function, \(void*\) message) N
(1\);) N
(     iret2 = pthread_create\( &thread2, NULL, print_message_function, \(void*\) mes) N
(sage2\);) N
() N
(     /* Wait till threads are complete before main continues. Unless we  */) N
(     /* wait we run the risk of executing an exit which will terminate   */) N
(     /* the process and all threads before the threads have completed.   */) N
() N
(     pthread_join <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pt) N
(hread_join>\( thread1, NULL\);) N
(     pthread_join\( thread2, NULL\); ) N
() N
(     printf\("Thread 1 returns: %d\\n",iret1\);) N
(     printf\("Thread 2 returns: %d\\n",iret2\);) N
(     exit\(0\);) N
(}) N
() N
(void *print_message_function\( void *ptr \)) N
({) N
(     char *message;) N
(     message = \(char *\) ptr;) N
(     printf\("%s \\n", message\);) N
(}) N
() N
(Compile: cc -lpthread pthread1.c) N
(Run: ./a.out) N
(Results:) N
() N
(Thread 1) N
(Thread 2) N
(Thread 1 returns: 0) N
(Thread 2 returns: 0) N
() N
(Details:) N
(LinuxTutorialPosixThreads.txt) (Page 2/15) (Mar 27, 05 20:57) title
border
grestore
(Printed by root) rhead
(./LinuxTutorialPosixThreads.txt) (1/8) (Sunday March 27, 2005) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(    * In this example the same function is used in each thread. The) N
(      arguments are different. The functions need not be the same.) N
() N
(    * Threads terminate by explicitly calling pthread_exit, by letting) N
(      the function return, or by a call to the function exit which will) N
(      terminate the process including any threads.) N
() N
(    * Function call: *pthread_create) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_create) N
(>*) N
() N
() N
(    int pthread_create\(pthread_t * thread, ) N
(                       const pthread_attr_t * attr,) N
(                       void * \(*start_routine\)\(void *\), ) N
(                       void *arg\);) N
(    ) N
() N
(      Arguments:) N
(          o thread - returns the thread id. \(unsigned long int defined) N
(            in bits/pthreadtypes.h\)) N
(          o attr - Set to NULL if default thread attributes are used.) N
(            \(else define members of the struct pthread_attr_t defined in) N
(            bits/pthreadtypes.h\) Attributes include:) N
(                + detached state \(joinable? Default:) N
(                  PTHREAD_CREATE_JOINABLE. Other option:) N
(                  PTHREAD_CREATE_DETACHED\)) N
(                + scheduling policy \(real-time?) N
(                  PTHREAD_INHERIT_SCHED,PTHREAD_EXPLICIT_SCHED,SCHED_OTHER\)) N
(                + scheduling parameter) N
(                + inheritsched attribute \(Default:) N
(                  PTHREAD_EXPLICIT_SCHED Inherit from parent thread:) N
(                  PTHREAD_INHERIT_SCHED\)) N
(                + scope \(Kernel threads: PTHREAD_SCOPE_SYSTEM User) N
(                  threads: PTHREAD_SCOPE_PROCESS Pick one or the other) N
(                  not both.\)) N
(                + guard size) N
(                + stack address \(See unistd.h and bits/posix_opt.h) N
(                  _POSIX_THREAD_ATTR_STACKADDR\)) N
(                + stack size \(default minimum PTHREAD_STACK_SIZE set in) N
(                  pthread.h\), ) N
(          o void * \(*start_routine\) - pointer to the function to be) N
(            threaded. Function has a single argument: pointer to void.) N
(          o *arg - pointer to argument of function. To pass multiple) N
(            arguments, send a pointer to a structure. ) N
() N
(    * Function call: *pthread_exit) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_exit>*) N
() N
() N
(    void pthread_exit\(void *retval\);) N
(    ) N
() N
(      Arguments:) N
(          o retval - Return value of thread. ) N
() N
(      This routine kills the thread. The pthread_exit function never) N
(      returns. If the thread is not detached, the thread id and return) N
(      value may be examined from another thread by using pthread_join.) N
(      Note: the return pointer *retval, must not be of local scope) N
(      otherwise it would cease to exist once the thread terminates.) N
() N
(    * [C++ pitfalls]: The above sample program will compile with the GNU) N
(      C and C++ compiler g++. The following function pointer) N
(      representation will work for C but not C++:) N
() N
(    void print_message_function\( void *ptr \);) N
(    ...) N
(LinuxTutorialPosixThreads.txt) (Page 3/15) (Mar 27, 05 20:57) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(    ...) p n
(    iret1 = pthread_create\( &thread1, NULL, \(void*\)&print_message_function, \(voi) N
(d*\) message1\);) N
(    ...) N
(    ...) N
(    ) N
() N
(------------------------------------------------------------------------) N
(*Thread Synchronization:*) N
() N
(The threads library provides three synchronization mechanisms:) N
() N
(    * mutexes - Mutual exclusion lock: Block access to variables by) N
(      other threads. This enforces exclusive access by a thread to a) N
(      variable or set of variables.) N
(    * joins - Make a thread wait till others are complete \(terminated\).) N
(    * condition variables - data type pthread_cond_t ) N
() N
(------------------------------------------------------------------------) N
() N
() N
(      Mutexes:) N
() N
(Mutexes are used to prevent data inconsistencies due to race conditions.) N
(A race condition often occurs when two or more threads need to perform) N
(operations on the same memory area, but the results of computations) N
(depends on the order in which these operations are performed. Mutexes) N
(are used for serializing shared resources. Anytime a global resource is) N
(accessed by more than one thread the resource should have a Mutex) N
(associated with it. One can apply a mutex to protect a segment of memory) N
(\("critical region"\) from other threads.) N
() N
(Example threaded function:) N
() N
(    Without Mutex) S 24 T (With Mutex) N
() N
() N
() N
(int counter=0;) N
() N
(/* Function C */) N
(void functionC\(\)) N
({) N
() N
(   counter++) N
() N
(}) N
() N
(    ) S 8 T () N
() N
(/* Note scope of variable and mutex are the same */) N
(pthread_mutex_t mutex1 = PTHREAD_MUTEX_INITIALIZER;) N
(int counter=0;) N
() N
(/* Function C */) N
(void functionC\(\)) N
({) N
(   pthread_mutex_lock\( &mutex1 \);) N
(   counter++) N
(   pthread_mutex_unlock\( &mutex1 \);) N
(}) N
() N
(    Possible execution sequence) N
(    Thread 1) S 16 T (Thread 2) S 32 T (Thread 1) S 48 T (Thread 2) N
(    counter = 0 ) S 24 T (counter = 0 ) S 40 T (counter = 0 ) S 56 T (counter = 0) N
(    counter = 1 ) S 24 T (counter = 1 ) S 40 T (counter = 1 ) S 56 T (Thread 2 locked out.) N
(    Thread 1 has exclusive use of variable counter) N
() N
(    ) S 8 T () N
(LinuxTutorialPosixThreads.txt) (Page 4/15) (Mar 27, 05 20:57) title
border
grestore
(Printed by root) rhead
(./LinuxTutorialPosixThreads.txt) (2/8) (Sunday March 27, 2005) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5-6) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(    ) p 8 T () N
(    ) S 8 T (counter = 2) N
() N
(If register load and store operations for the incrementing of variable) N
(counter occurs with unfortunate timing, it is theoretically possible to) N
(have each thread increment and overwrite the same variable with the same) N
(value. Another possibility is that thread two would first increment) N
(counter locking out thread one until complete and then thread one would) N
(increment it to 2.) N
() N
(    Sequence) S 16 T (Thread 1) S 32 T (Thread 2) N
(    1) S 8 T (counter = 0) S 24 T (counter=0) N
(    2) S 8 T (Thread 1 locked out.) N
(    Thread 2 has exclusive use of variable counter ) S 56 T (counter = 1) N
(    3) S 8 T (counter = 2) S 24 T () N
() N
(Code listing: mutex1.c) N
() N
(#include <stdio.h>) N
(#include <stdlib.h>) N
(#include <pthread.h>) N
() N
(void *functionC\(\);) N
(pthread_mutex_t mutex1 = PTHREAD_MUTEX_INITIALIZER;) N
(int  counter = 0;) N
() N
(main\(\)) N
({) N
(   int rc1, rc2;) N
(   pthread_t thread1, thread2;) N
() N
(   /* Create independant threads each of which will execute functionC */) N
() N
(   if\( \(rc1=pthread_create\( &thread1, NULL, &functionC, NULL\)\) \)) N
(   {) N
(      printf\("Thread creation failed: %d\\n", rc1\);) N
(   }) N
() N
(   if\( \(rc2=pthread_create\( &thread2, NULL, &functionC, NULL\)\) \)) N
(   {) N
(      printf\("Thread creation failed: %d\\n", rc2\);) N
(   }) N
() N
(   /* Wait till threads are complete before main continues. Unless we  */) N
(   /* wait we run the risk of executing an exit which will terminate   */) N
(   /* the process and all threads before the threads have completed.   */) N
() N
(   pthread_join\( thread1, NULL\);) N
(   pthread_join\( thread2, NULL\); ) N
() N
(   exit\(0\);) N
(}) N
() N
(void *functionC\(\)) N
({) N
(   pthread_mutex_lock <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topi) N
(c=pthread_mutex_lock>\( &mutex1 \);) N
(   counter++;) N
(   printf\("Counter value: %d\\n",counter\);) N
(   pthread_mutex_unlock <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&to) N
(pic=pthread_mutex_unlock>\( &mutex1 \);) N
(}) N
() N
(Compile: cc -lpthread mutex1.c) N
(Run: ./a.out) N
(Results:) N
() N
(Counter value: 1) N
(Counter value: 2) N
(LinuxTutorialPosixThreads.txt) (Page 5/15) (Mar 27, 05 20:57) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(When a mutex lock is attempted against a mutex which is held by another) N
(thread, the thread is blocked until the mutex is unlocked. When a thread) N
(terminates, the mutex does not unless explicitly unlocked. Nothing) N
(happens by default.) N
() N
(------------------------------------------------------------------------) N
() N
() N
(      Joins:) N
() N
(A join is performed when one wants to wait for a thread to finish. A) N
(thread calling routine may launch multiple threads then wait for them to) N
(finish to get the results. One wait for the completion of the threads) N
(with a join.) N
() N
(Sample code: join1.c) N
() N
(#include <stdio.h>) N
(#include <pthread.h>) N
() N
(#define NTHREADS 10) N
(void *thread_function\(\);) N
(pthread_mutex_t mutex1 = PTHREAD_MUTEX_INITIALIZER;) N
(int  counter = 0;) N
() N
(main\(\)) N
({) N
(   pthread_t thread_id[NTHREADS];) N
(   int i, j;) N
() N
(   for\(i=0; i < NTHREADS; i++\)) N
(   {) N
(      pthread_create <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic) N
(=pthread_create>\( &thread_id[i], NULL, &thread_function, NULL \);) N
(   }) N
() N
(   for\(j=0; j < NTHREADS; j++\)) N
(   {) N
(      pthread_join <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=p) N
(thread_join>\( thread_id[j], NULL\); ) N
(   }) N
(  ) N
(   /* Now that all threads are complete I can print the final result.     */) N
(   /* Without the join I could be printing a value before all the threads */) N
(   /* have been completed.                                                */) N
() N
(   printf\("Final counter value: %d\\n", counter\);) N
(}) N
() N
(void *thread_function\(\)) N
({) N
(   printf\("Thread number %ld\\n", pthread_self <http://www2.yo-linux.com/cgi-bin/) N
(man.cgi?section=all&topic=pthread_self>\(\)\);) N
(   pthread_mutex_lock\( &mutex1 \);) N
(   counter++;) N
(   pthread_mutex_unlock\( &mutex1 \);) N
(}) N
() N
(Compile: cc -lpthread join1.c) N
(Run: ./a.out) N
(Results:) N
() N
(Thread number 1026) N
(Thread number 2051) N
(Thread number 3076) N
(Thread number 4101) N
(Thread number 5126) N
(Thread number 6151) N
(LinuxTutorialPosixThreads.txt) (Page 6/15) (Mar 27, 05 20:57) title
border
grestore
(Printed by root) rhead
(./LinuxTutorialPosixThreads.txt) (3/8) (Sunday March 27, 2005) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (7-8) 4
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(Thread number 7176) p n
(Thread number 8201) N
(Thread number 9226) N
(Thread number 10251) N
(Final counter value: 10) N
() N
(------------------------------------------------------------------------) N
() N
() N
(      Condition Variables:) N
() N
(A condition variable is a variable of type pthread_cond_t and is used) N
(with the appropriate functions for waiting and later, process) N
(continuation. The condition variable mechanism allows threads to suspend) N
(execution and relinquish the processor until some condition is true. A) N
(condition variable must always be associated with a mutex to avoid a) N
(race condition created by one thread preparing to wait and another) N
(thread which may signal the condition before the first thread actually) N
(waits on it resulting in a deadlock. The thread will be perpetually) N
(waiting for a signal that is never sent. Any mutex can be used, there is) N
(no explicit link between the mutex and the condition variable.) N
() N
(Functions used in conjunction with the condition variable:) N
() N
(    * Creating/Destroying:) N
(          o pthread_cond_init) N
(            <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_) N
(cond_init>) N
() N
(          o pthread_cond_t cond = PTHREAD_COND_INITIALIZER;) N
(          o pthread_cond_destroy) N
(            <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_) N
(cond_destroy>) N
() N
(    * Waiting on condition:) N
(          o pthread_cond_wait) N
(            <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_) N
(cond_wait>) N
() N
(          o pthread_cond_timedwait) N
(            <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_) N
(cond_timedwait>) N
(            - place limit on how long it will block. ) N
(    * Waking thread based on condition:) N
(          o pthread_cond_signal) N
(            <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_) N
(cond_signal>) N
() N
(          o pthread_cond_broadcast) N
(            <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_) N
(cond_broadcast>) N
(            - wake up all threads blocked by the specified condition) N
(            variable. ) N
() N
(Example code: cond1.c) N
() N
(#include <stdio.h>) N
(#include <stdlib.h>) N
(#include <pthread.h>) N
() N
(pthread_mutex_t count_mutex     = PTHREAD_MUTEX_INITIALIZER;) N
(pthread_mutex_t condition_mutex = PTHREAD_MUTEX_INITIALIZER;) N
(pthread_cond_t  condition_cond  = PTHREAD_COND_INITIALIZER;) N
() N
(void *functionCount1\(\);) N
(void *functionCount2\(\);) N
(int  count = 0;) N
(#define COUNT_DONE  10) N
(#define COUNT_HALT1  3) N
(LinuxTutorialPosixThreads.txt) (Page 7/15) (Mar 27, 05 20:57) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#define COUNT_HALT2  6) p n
() N
(main\(\)) N
({) N
(   pthread_t thread1, thread2;) N
() N
(   pthread_create\( &thread1, NULL, &functionCount1, NULL\);) N
(   pthread_create\( &thread2, NULL, &functionCount2, NULL\);) N
(   pthread_join\( thread1, NULL\);) N
(   pthread_join\( thread2, NULL\);) N
() N
(   exit\(0\);) N
(}) N
() N
(void *functionCount1\(\)) N
({) N
(   for\(;;\)) N
(   {) N
(      pthread_mutex_lock <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&t) N
(opic=pthread_mutex_lock>\( &condition_mutex \);) N
(      while\( count >= COUNT_HALT1 && count <= COUNT_HALT2 \)) N
(      {) N
(         pthread_cond_wait <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all) N
(&topic=pthread_cond_wait>\( &condition_cond, &condition_mutex \);) N
(      }) N
(      pthread_mutex_unlock <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all) N
(&topic=pthread_mutex_unlock>\( &condition_mutex \);) N
() N
(      pthread_mutex_lock\( &count_mutex \);) N
(      count++;) N
(      printf\("Counter value functionCount1: %d\\n",count\);) N
(      pthread_mutex_unlock\( &count_mutex \);) N
() N
(      if\(count >= COUNT_DONE\) return\(NULL\);) N
(    }) N
(}) N
() N
(void *functionCount2\(\)) N
({) N
(    for\(;;\)) N
(    {) N
(       pthread_mutex_lock\( &condition_mutex \);) N
(       if\( count < COUNT_HALT1 || count > COUNT_HALT2 \)) N
(       {) N
(          pthread_cond_signal <http://www2.yo-linux.com/cgi-bin/man.cgi?section=) N
(all&topic=pthread_cond_signal>\( &condition_cond \);) N
(       }) N
(       pthread_mutex_unlock\( &condition_mutex \);) N
() N
(       pthread_mutex_lock\( &count_mutex \);) N
(       count++;) N
(       printf\("Counter value functionCount2: %d\\n",count\);) N
(       pthread_mutex_unlock\( &count_mutex \);) N
() N
(       if\(count >= COUNT_DONE\) return\(NULL\);) N
(    }) N
() N
(}) N
() N
(Compile: cc -lpthread cond1.c) N
(Run: ./a.out) N
(Results:) N
() N
(Counter value functionCount1: 1) N
(Counter value functionCount1: 2) N
(Counter value functionCount1: 3) N
(Counter value functionCount2: 4) N
(Counter value functionCount2: 5) N
(Counter value functionCount2: 6) N
(LinuxTutorialPosixThreads.txt) (Page 8/15) (Mar 27, 05 20:57) title
border
grestore
(Printed by root) rhead
(./LinuxTutorialPosixThreads.txt) (4/8) (Sunday March 27, 2005) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (9-10) 5
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(Counter value functionCount2: 7) p n
(Counter value functionCount1: 8) N
(Counter value functionCount1: 9) N
(Counter value functionCount1: 10) N
(Counter value functionCount2: 11) N
() N
(Note that functionCount1\(\) was halted while count was between the values) N
(COUNT_HALT1 and COUNT_HALT2. The only thing that has been ensures is) N
(that functionCount2 will increment the count between the values) N
(COUNT_HALT1 and COUNT_HALT2. Everything else is random.) N
() N
(The logic conditions \(the "if" and "while" statements\) must be chosen to) N
(insure that the "signal" is executed if the "wait" is ever processed.) N
(Poor software logic can also lead to a deadlock condition.) N
() N
(Note: Race conditions abound with this example because count is used as) N
(the condition and can't be locked in the while statement without causing) N
(deadlock. I'll work on a cleaner example but it is an example of a) N
(condition variable.) N
() N
(------------------------------------------------------------------------) N
(*Thread Scheduling:*) N
() N
(When this option is enabled, each thread may have its own scheduling) N
(properties. Scheduling attributes may be specified:) N
() N
(    * during thread creation) N
(    * by dynamically by changing the attributes of a thread already created) N
(    * by defining the effect of a mutex on the thread's scheduling when) N
(      creating a mutex) N
(    * by dynamically changing the scheduling of a thread during) N
(      synchronization operations. ) N
() N
(The threads library provides default values that are sufficient for most) N
(cases.) N
() N
(------------------------------------------------------------------------) N
(*Thread Pitfalls:*) N
() N
(    * Race conditions: While the code may appear on the screen in the) N
(      order you wish the code to execute, threads are scheduled by the) N
(      operating system and are executed at random. It cannot be assumed) N
(      that threads are executed in the order they are created. They may) N
(      also execute at different speeds. When threads are executing) N
(      \(racing to complete\) they may give unexpected results \(race) N
(      condition\). Mutexes and joins must be utilized to acheive a) N
(      predictable execution order and outcome.) N
() N
(    * Thread safe code: The threaded routines must call functions which) N
(      are "thread safe". This means that there are no static or global) N
(      variables which other threads may clobber or read assuming single) N
(      threaded operation. If static or global variables are used then) N
(      mutexes must be applied or the functions must be re-written to) N
(      avoid the use of these variables. In C, local variables are) N
(      dynamically allocated on the stack. Therefore, any function that) N
(      does not use static data or other shared resources is thread-safe.) N
(      Thread-unsafe functions may be used by only one thread at a time) N
(      in a program and the uniqueness of the thread must be ensured.) N
(      Many non-reentrant functions return a pointer to static data. This) N
(      can be avoided by returning dynamically allocated data or using) N
(      caller-provided storage. An example of a non-thread safe function) N
(      is strtok which is also not re-entrant. The "thread safe" version) N
(      is the re-entrant version strtok_r.) N
() N
(    * Mutex Deadlock: This condition occurs when a mutex is applied but) N
(      then not "unlocked". This causes program execution to halt) N
(      indefinitely. It can also be caused by poor application of mutexes) N
(      or joins. Be carefull when applying two or more mutexes to a) N
(      section of code. If the first pthread_mutex_lock is applied and) N
(LinuxTutorialPosixThreads.txt) (Page 9/15) (Mar 27, 05 20:57) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      the second pthread_mutex_lock fails due to another thread applying) p n
(      a mutex, the first mutex may eventually lock all other threads) N
(      from accessing data including the thread which holds the second) N
(      mutex. The threads may wait indefinitely for the resource to) N
(      become free causing a deadlock. It is best to test and if failure) N
(      occurs, free the resources and stall before retrying.) N
() N
(    ...) N
(    pthread_mutex_lock\(&mutex_1\);) N
(    while \( pthread_mutex_trylock\(&mutex_2\) \)  /* Test if already locked   */) N
(    {) N
(       pthread_mutex_unlock\(&mutex_1\);  /* Free resource to avoid deadlock */) N
(       ...) N
(       /* stall here   */) N
(       ...) N
(       pthread_mutex_lock\(&mutex_1\);) N
(    }) N
(    count++;) N
(    pthread_mutex_unlock\(&mutex_1\);) N
(    pthread_mutex_unlock\(&mutex_2\);) N
(    ...) N
(    ) N
() N
(      The order of applying the mutex is also important. The following) N
(      code segment illustrates a potential for deadlock:) N
() N
(    void *function1\(\)) N
(    {) N
(       ...) N
(       pthread_mutex_lock\(&lock1\);           */- Execution step 1/*) N
(       pthread_mutex_lock\(&lock2\);           */- Execution step 3 DEADLOCK!!!/*) N
(       ...) N
(       ...) N
(       pthread_mutex_lock\(&lock2\);) N
(       pthread_mutex_lock\(&lock1\);) N
(       ...) N
(    } ) N
() N
(    void *function2\(\)) N
(    {) N
(       ...) N
(       pthread_mutex_lock\(&lock2\);           */- Execution step 2/*) N
(       pthread_mutex_lock\(&lock1\);) N
(       ...) N
(       ...) N
(       pthread_mutex_lock\(&lock1\);) N
(       pthread_mutex_lock\(&lock2\);) N
(       ...) N
(    } ) N
(  ) N
(    main\(\)) N
(    {) N
(       ...) N
(       pthread_create\(&thread1, NULL, function1, NULL\);) N
(       pthread_create\(&thread2, NULL, function1, NULL\);) N
(       ...) N
(    }) N
(    ) N
() N
(      If function1 aquires the first mutex and function2 aquires the) N
(      second, all resources are tied up and locked.) N
() N
(    * Condition Variable Deadlock: The logic conditions \(the "if" and) N
(      "while" statements\) must be chosen to insure that the "signal" is) N
(      executed if the "wait" is ever processed. ) N
() N
(------------------------------------------------------------------------) N
(*Thread Debugging:*) N
() N
(LinuxTutorialPosixThreads.txt) (Page 10/15) (Mar 27, 05 20:57) title
border
grestore
(Printed by root) rhead
(./LinuxTutorialPosixThreads.txt) (5/8) (Sunday March 27, 2005) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (11-12) 6
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(    * Thread Debug Interface \(TDI\) and Thread Debugging Commands of the) p n
(      GDB <http://www.informatik.hu-berlin.de/~mueller/TDI>) N
(    * Smart GDB <http://hegel.ittc.ukans.edu/projects/smartgdb/> ) N
() N
(------------------------------------------------------------------------) N
(*Thread Man Pages:*) N
() N
(    * pthread_atfork) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_atfork) N
(>) N
(      - register handlers to be called at fork\(2\) time) N
(    * pthread_attr_destroy) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_attr_d) N
(estroy>) N
(      [pthread_attr_init] - thread creation attributes) N
(    * pthread_attr_getdetachstate) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_attr_g) N
(etdetachstate>) N
(      [pthread_attr_init] - thread creation attributes) N
(    * pthread_attr_getinheritsched) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_attr_g) N
(etinheritsched>) N
(      [pthread_attr_init] - thread creation attributes) N
(    * pthread_attr_getschedparam) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_attr_g) N
(etschedparam>) N
(      [pthread_attr_init] - thread creation attributes) N
(    * pthread_attr_getschedpolicy) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_attr_g) N
(etschedpolicy>) N
(      [pthread_attr_init] - thread creation attributes) N
(    * pthread_attr_getscope) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_attr_g) N
(etscope>) N
(      [pthread_attr_init] - thread creation attributes) N
(    * pthread_attr_init) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_attr_i) N
(nit>) N
(      - thread creation attributes) N
(    * pthread_attr_setdetachstate) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_attr_s) N
(etdetachstate>) N
(      [pthread_attr_init] - thread creation attributes) N
(    * pthread_attr_setinheritsched) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_attr_s) N
(etinheritsched>) N
(      [pthread_attr_init] - thread creation attributes) N
(    * pthread_attr_setschedparam) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_attr_s) N
(etschedparam>) N
(      [pthread_attr_init] - thread creation attributes) N
(    * pthread_attr_setschedpolicy) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_attr_s) N
(etschedpolicy>) N
(      [pthread_attr_init] - thread creation attributes) N
(    * pthread_attr_setscope) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_attr_s) N
(etscope>) N
(      [pthread_attr_init] - thread creation attributes) N
(    * pthread_cancel) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_cancel) N
(>) N
(      - thread cancellation) N
(    * pthread_cleanup_pop) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_cleanu) N
(p_pop>) N
(      [pthread_cleanup_push] - install and remove cleanup handlers) N
(    * pthread_cleanup_pop_restore_np) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_cleanu) N
(LinuxTutorialPosixThreads.txt) (Page 11/15) (Mar 27, 05 20:57) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(p_pop_restore_np>) p n
(      [pthread_cleanup_push] - install and remove cleanup handlers) N
(    * pthread_cleanup_push) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_cleanu) N
(p_push>) N
(      - install and remove cleanup handlers) N
(    * pthread_cleanup_push_defer_np) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_cleanu) N
(p_push_defer_np>) N
(      [pthread_cleanup_push] - install and remove cleanup handlers) N
(    * pthread_condattr_destroy) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_condat) N
(tr_destroy>) N
(      [pthread_condattr_init] - condition creation attributes) N
(    * pthread_condattr_init) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_condat) N
(tr_init>) N
(      - condition creation attributes) N
(    * pthread_cond_broadcast) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_cond_b) N
(roadcast>) N
(      [pthread_cond_init] - operations on conditions) N
(    * pthread_cond_destroy) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_cond_d) N
(estroy>) N
(      [pthread_cond_init] - operations on conditions) N
(    * pthread_cond_init) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_cond_i) N
(nit>) N
(      - operations on conditions) N
(    * pthread_cond_signal) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_cond_s) N
(ignal>) N
(      [pthread_cond_init] - operations on conditions) N
(    * pthread_cond_timedwait) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_cond_t) N
(imedwait>) N
(      [pthread_cond_init] - operations on conditions) N
(    * pthread_cond_wait) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_cond_w) N
(ait>) N
(      [pthread_cond_init] - operations on conditions) N
(    * pthread_create) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_create) N
(>) N
(      - create a new thread) N
(    * pthread_detach) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_detach) N
(>) N
(      - put a running thread in the detached state) N
(    * pthread_equal) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_equal>) N
(      - compare two thread identifiers) N
(    * pthread_exit) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_exit>) N
(      - terminate the calling thread) N
(    * pthread_getschedparam) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_getsch) N
(edparam>) N
(      [pthread_setschedparam] - control thread scheduling parameters) N
(    * pthread_getspecific) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_getspe) N
(cific>) N
(      [pthread_key_create] - management of thread-specific data) N
(    * pthread_join) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_join>) N
(      - wait for termination of another thread) N
(    * pthread_key_create) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_key_cr) N
(LinuxTutorialPosixThreads.txt) (Page 12/15) (Mar 27, 05 20:57) title
border
grestore
(Printed by root) rhead
(./LinuxTutorialPosixThreads.txt) (6/8) (Sunday March 27, 2005) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (13-14) 7
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(eate>) p n
(      - management of thread-specific data) N
(    * pthread_key_delete) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_key_de) N
(lete>) N
(      [pthread_key_create] - management of thread-specific data) N
(    * pthread_kill_other_threads_np) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_kill_o) N
(ther_threads_np>) N
(      - terminate all threads in program except calling thread) N
(    * pthread_kill) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_kill>) N
(      [pthread_sigmask] - handling of signals in threads) N
(    * pthread_mutexattr_destroy) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_mutexa) N
(ttr_destroy>) N
(      [pthread_mutexattr_init] - mutex creation attributes) N
(    * pthread_mutexattr_getkind_np) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_mutexa) N
(ttr_getkind_np>) N
(      [pthread_mutexattr_init] - mutex creation attributes) N
(    * pthread_mutexattr_init) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_mutexa) N
(ttr_init>) N
(      - mutex creation attributes) N
(    * pthread_mutexattr_setkind_np) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_mutexa) N
(ttr_setkind_np>) N
(      [pthread_mutexattr_init] - mutex creation attributes) N
(    * pthread_mutex_destroy) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_mutex_) N
(destroy>) N
(      [pthread_mutex_init] - operations on mutexes) N
(    * pthread_mutex_init) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_mutex_) N
(init>) N
(      - operations on mutexes) N
(    * pthread_mutex_lock) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_mutex_) N
(lock>) N
(      [pthread_mutex_init] - operations on mutexes) N
(    * pthread_mutex_trylock) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_mutex_) N
(trylock>) N
(      [pthread_mutex_init] - operations on mutexes) N
(    * pthread_mutex_unlock) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_mutex_) N
(unlock>) N
(      [pthread_mutex_init] - operations on mutexes) N
(    * pthread_once) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_once>) N
(      - once-only initialization) N
(    * pthread_self) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_self>) N
(      - return identifier of current thread) N
(    * pthread_setcancelstate) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_setcan) N
(celstate>) N
(      [pthread_cancel] - thread cancellation) N
(    * pthread_setcanceltype) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_setcan) N
(celtype>) N
(      [pthread_cancel] - thread cancellation) N
(    * pthread_setschedparam) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_setsch) N
(edparam>) N
(      - control thread scheduling parameters) N
(    * pthread_setspecific) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_setspe) N
(LinuxTutorialPosixThreads.txt) (Page 13/15) (Mar 27, 05 20:57) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(cific>) p n
(      [pthread_key_create] - management of thread-specific data) N
(    * pthread_sigmask) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_sigmas) N
(k>) N
(      - handling of signals in threads) N
(    * pthread_testcancel) N
(      <http://www2.yo-linux.com/cgi-bin/man.cgi?section=all&topic=pthread_testca) N
(ncel>) N
(      [pthread_cancel] - thread cancellation ) N
() N
(------------------------------------------------------------------------) N
(*Links:*) N
() N
(    * Next Generation POSIX Threading <http://www-124.ibm.com/pthreads/>) N
(      - IBM Developerworks) N
(    * Native Posix Thread Library for Linux) N
(      <http://people.redhat.com/drepper/nptl-design.pdf>) N
(    * Introduction to Programming Threads) N
(      <http://www.mit.edu/people/proven/IAP_2000/index.html>) N
(    * LinuxThreads Frequently Asked Questions) N
(      <http://pauillac.inria.fr/~xleroy/linuxthreads/faq.html>) N
(    * Fundamentals Of Multithreading) N
(      <http://www.systemlogic.net/articles/01/6/multithreading/print.php>) N
(      - Paul Mazzucco) N
(    * Getting Started With POSIX Threads) N
(      <http://dis.cs.umass.edu/~wagner/threads_html/tutorial.html>) N
(    * ITS: Introduction to Threads) N
(      <http://www.uwo.ca/its/doc/courses/notes/hpc/pthreads.html>) N
(    * GNU Portable Threads <http://www.gnu.org/software/pth/>) N
(    * Introduction of threads for Solaris, Linux, and Windows) N
(      <http://www.northco.net/chenke/project/project2.html>) N
(    * Comparison of thread implementations) N
(      <http://members.aol.com/drbutenhof/ThreadTable.html>) N
(    * comp.programming.threads FAQ) N
(      <http://www.serpentine.com/~bos/threads-faq/>) N
(    * An in-depth description of PMPthread internal queue functions.) N
(      <http://www.humanfactor.com/pthreads/mit-pthreads-queues.html>) N
(    * Examples <http://www.csce.uark.edu/~aapon/courses/os/examples/>) N
(    * Pthreads tutorial and examples of thread problems) N
(      <http://www.cs.nmsu.edu/~jcook/Tools/pthreads/pthreads.html> - by) N
(      Andrae Muys) N
(    * Valgrind KDE thread checker: Helgrind) N
(      <http://valgrind.kde.org/tools.html>) N
(    * Sun's Multithreaded Programming Guide) N
(      <http://docs.sun.com/?q=%22Multithreaded+Programming+Guide%22&p=/doc/802-5) N
(938>) N
(      - Not Linux but a good reference.) N
(    * IBM pthread documentation) N
(      <http://java.icmc.sc.usp.br/library/books/ibm_pthreads/document.htm>) N
(    * FSU Pthreads \(POSIX Threads\)) N
(      <http://www.informatik.hu-berlin.de/~mueller/pthreads/>) N
(    * Linux-mag.com: Concurrent Programming Topics) N
(      <http://www.linux-mag.com/2001-04/compile_01.html> - semaphores,) N
(      condition variables) N
(    * Linux-mag.com: The Fibers of Threads) N
(      <http://www.linux-mag.com/2001-05/compile_01.html> - Discussion of) N
(      how Linux threads work) N
(    * Platform independent threads:) N
(          o Gnome GLib 2.0 threads) N
(            <http://developer.gnome.org/doc/API/2.0/glib/glib-Threads.html>) N
(            - Thread abstraction; including mutexes, conditions and) N
(            thread private data. [example) N
(            <http://developer.gnome.org/doc/API/2.0/gdk/gdk-Threads.html>]) N
(          o OmniORB \(CORBA\) Thread Library) N
(            <http://omniorb.sourceforge.net/omni40/omnithread.html>) N
(          o zThreads <http://zthread.sourceforge.net> ) N
(    * *C++ Thread classes:*) N
(          o GNU: Common C++ <http://www.gnu.org/software/commoncpp/> -) N
(LinuxTutorialPosixThreads.txt) (Page 14/15) (Mar 27, 05 20:57) title
border
grestore
(Printed by root) rhead
(./LinuxTutorialPosixThreads.txt) (7/8) (Sunday March 27, 2005) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (15) 8
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(            support for threading, sockets, file access, daemons,) p n
(            persistence, serial I/O, XML parsing and system services) N
(          o ACE: Adaptive Communication Environment) N
(            <http://www.cs.wustl.edu/~schmidt/ACE.html> - C++ interface) N
(                + ACE programmers guide: [pdf] \(see page 29 for threads\)) N
(                  <http://www.cs.wustl.edu/~schmidt/PDF/ACE-tutorial.pdf>) N
(                + Thread management examples using ACE) N
(                  <http://www.cs.wustl.edu/~schmidt/ACE_wrappers/docs/tutorials/) N
(Chap_4/ex01.html>) N
() N
(          o Hood <http://www.cs.utexas.edu/users/hood/> - A C++ Threads) N
(            Library for Multiprogrammed Multiprocessors) N
(          o C++ Thread classes <http://threads.sourceforge.net/> -) N
(            sourceforge) N
(          o QpThread <http://lin.fsid.cvut.cz/~kra/index.html#QpThread> ) N
() N
(News Groups:) N
() N
(    * comp.programming.threads) N
(    * comp.unix.solaris ) N
() N
(------------------------------------------------------------------------) N
(* Books:*) N
() N
(    ) S 8 T (Pthreads Programming A POSIX Standard for Better Multiprocessing) N
(    By Bradford Nichols, Dick Buttlar, Jacqueline Proulx Farrell) N
(    ISBN #1-56592-115-1, O'Reilly) N
() N
(    ) S 8 T (Amazon.com) N
(    <http://www.amazon.com/exec/obidos/ASIN/1565921151/yolinux-20>) N
(    <http://service.bfast.com/bfast/click?bfmid=2181&sourceid=39358384&bfpid=156) N
(5921151&bfmtype=book>) N
() N
(    ) S 8 T (Programming with POSIX\(R\) Threads) N
(    By David R. Butenhof) N
(    ISBN #0201633922, Addison Wesley Pub. Co.) N
() N
(    ) S 8 T (Amazon.com) N
(    <http://www.amazon.com/exec/obidos/ASIN/0201633922/yolinux-20>) N
(    <http://service.bfast.com/bfast/click?bfmid=2181&sourceid=39358384&bfpid=020) N
(1633922&bfmtype=book>) N
() N
(    ) S 8 T (C++ Network Programming Volume 1) N
(    By Douglas C. Schmidt, Stephen D. Huston) N
(    ISBN #0201604647, Addison Wesley Pub. Co.) N
() N
(    Covers ACE \(ADAPTIVE Communication Environment\) open-source) N
(    framework view of threads and other topics.) N
() N
(    ) S 8 T (Amazon.com) N
(    <http://www.amazon.com/exec/obidos/ASIN/0201604647/yolinux-20>) N
(    <http://service.bfast.com/bfast/click?bfmid=2181&sourceid=39358384&bfpid=020) N
(1604647&bfmtype=book>) N
() N
() N
(------------------------------------------------------------------------) N
() N
(See http://YoLinux.com for more Linux information and tutorials) N
(Return to YoLinux Tutorial Index <index.html>) N
(Copyright \251 2002, 2003, 2004 by /Greg Ippolito/) N
(<http://www.burstnet.com/ads/ba9427a-map.cgi/SZ=468X60B/V=2.0S/BRC=14475/BCPG115) N
(67.33500.34971/>) N
() N
() N
(LinuxTutorialPosixThreads.txt) (Page 15/15) (Mar 27, 05 20:57) title
border
grestore
(Printed by root) rhead
(./LinuxTutorialPosixThreads.txt) (8/8) (Sunday March 27, 2005) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
