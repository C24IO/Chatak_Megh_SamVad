<html><head><title>CS360 Lecture notes -- Doubly Linked Lists</title></head>
<body bgcolor="#ffffff">
<h1><a href="http://www.cs.utk.edu/%7Eplank/plank/classes/cs360">CS360</a>
Lecture notes -- Doubly Linked Lists</h1>
<li><a href="http://www.cs.utk.edu/%7Eplank">Jim Plank</a>
</li><li>Directory: <b>~plank/plank/classes/cs360/360/www-home/notes/Dllists</b>
</li><li>Lecture notes:
    <a href="http://www.cs.utk.edu/%7Eplank/plank/classes/cs360/360/notes/Dllists">
    <b>http://www.cs.utk.edu/~plank/plank/classes/cs360/360/notes/Dllists</b></a>
</li><li>
Wed Aug 25 10:14:37 EDT 1999
<hr>


<hr>
<h2>Doubly Linked Lists</h2>

Doubly linked lists are like singly linked lists, except each node
has two pointers -- one to the next node, and one to the previous
node.  This makes life nice in many ways:

<ul>
<li> You can traverse lists forward and backward.
</li><li> You can insert anywhere in a list easily.  This includes
     inserting before a node, after a node, at the front of
     the list, and at the end of the list.
</li><li> You can delete nodes very easily.
</li></ul>

The API for doubly linked lists is in 
<a href="http://www.cs.utk.edu/%7Eplank/plank/classes/cs360/360/notes/Dllists/dllist.h"><b>dllist.h</b></a>.  It defines a doubly-linked list
node:
<pre>typedef struct dllist {
  struct dllist *flink;
  struct dllist *blink;
  Jval val;
} *Dllist;
</pre>
<p>
Here are the operations supported by <b>dllist.o</b>:

</p><ul>
<li> <b>Dllist new_dllist()</b>: Allocates and returns a new doubly linked list.
</li><li> <b>free_dllist(Dllist l)</b>: Destroys the list, calling <b>free()</b>
      on all allocated memory in the list.  The list does not have to
      be empty.
</li><li> <b>dll_prepend(Dllist l, Jval val)</b>:
       Adds a new node at the beginning of the list.
        This node's value is <b>val</b>.  <b>Dll_prepend()</b> has
        no return value.
</li><li> <b>dll_append(Dllist l, Jval val)</b>:
       Adds a new node at the end of the list.
        This node's value is <b>val</b>.  <b>Dll_append()</b> has
        no return value.
</li><li> <b>dll_insert_b(Dllist n, Jval val)</b>: 
     Adds a new node to the list 
     right before the specified node.
      This node's value is <b>val</b>.
</li><li> <b>dll_insert_a(Dllist n, Jval val)</b>: 
     Adds a new node to the list 
     right after the specified node.
      This node's value is <b>val</b>.
</li><li> <b>Dllist dll_nil(Dllist l)</b>: Returns a pointer to the <b>nil</b> 
     (sentinel) node
     for the list.  You can think of <b>nil</b> as a node with no value, that
     begins and ends the list.  Since <b>l</b> points to the sentinel 
     node, <b>dll_nil</b> returns <b>l</b>.  You don't need to call
     <b>dll_nil()</b> to access the sentinel node.  You can just use
     <b>l</b>, although it makes your code more readable if you use
     <b>dll_nil()</b>.
</li><li> <b>Dllist dll_first(Dllist l)</b>: Returns a pointer to the first node
     in the list.  
     If the list is empty, this returns the sentinel.  
     As with <b>dll_nil()</b>, you don't need to call <b>dll_first(l)</b> --
     you can just use <b>l-&gt;flink</b>.
</li><li> <b>Dllist dll_last(Dllist l)</b>: Returns a pointer to the last node
     in the list.  
     If the list is empty, this returns the sentinel.  As
     with <b>dll_nil()</b>, you don't need to call <b>dll_last(l)</b> --
     you can just use <b>l-&gt;blink</b>.
</li><li> <b>Dllist dll_next(Dllist n)</b>: Returns a pointer to the next node
     in the list after <b>n</b>.  
     If <b>n</b> is the last node on the list,
     then <b>dll_next(n)</b> returns the sentinel.
     As with <b>dll_first()</b>, you don't need to call <b>dll_next(n)</b> --
     you can just use <b>n-&gt;flink</b>.
</li><li> <b>Dllist dll_prev(Dllist n)</b>: Returns a pointer to the previous node
     in the list before <b>n</b>.  
     If <b>n</b> is the first node on the list,
     then <b>dll_prev(n)</b> returns the sentinel.
     As with <b>dll_last()</b>, you don't need to call <b>dll_prev(n)</b> --
     you can just use <b>n-&gt;blink</b>.
</li><li> <b>int dll_empty(Dllist l)</b>: Returns whether <b>l</b> is empty.
</li><li> <b>Jval dll_val(Dllist n)</b>: Returns node <b>n</b>'s <b>val</b> 
     field.  Again, you don't need to use this, but sometimes it comes
     in handy.
</li><li> <b>int dll_delete_node(Dllist n)</b>: Deletes and frees node <b>n</b>.
</li></ul>

Finally, there are two macros for traversing <b>dllists</b> forwards
and backwards.  <b>ptr</b> should be a <b>Dllist</b> and <b>list</b>
should be a <b>Dllist</b>:
<pre>#define dll_traverse(ptr, list) \
  for (ptr = (list)-&gt;flink; ptr != (list); ptr = ptr-&gt;flink)
#define dll_rtraverse(ptr, list) \
  for (ptr = (list)-&gt;blink; ptr != (list); ptr = ptr-&gt;blink)
</pre>

<hr>
<h2>Implementation</h2>

The implementation of each <b>dllists</b> is as a circular doubly-linked 
list with a sentinel node.  The code is in
<a href="http://www.cs.utk.edu/%7Eplank/plank/classes/cs360/360/notes/Dllists/dllist.c"><b>dllist.c</b></a>.
<p>
The <b>typedef</b> for a <b>dllist</b> node is:
</p><pre>typedef struct dllist {
  struct dllist *flink;
  struct dllist *blink;
  Jval val;
} *Dllist;
</pre>
Note that each node has two pointers -- a forward link (<b>flink</b>) to 
the next node on the list, and a backward link (<b>blink</b>) to the 
previous node on the list.  A <b>Dllist</b> is a pointer to the sentinel
node.
<p>
The list is circular in both directions -- the sentinel's <b>flink</b>
points to the first node on the list, and its <b>blink</b> points
to the last node on the list.  The first node's <b>blink</b> points to
the sentinel, as does the last node's <b>flink</b>.
</p><p>
Some ascii art:  Here's an empty list <b>l</b>:
</p><pre>l -------------+--&gt; |-----------|
               |    | flink ---------\
               |    | blink -------\ |
               |    | val = ?   |  | |
               |    |-----------|  | |
               |                   | |
               \-------------------+-/
</pre>
And here's that list after calling <b>dll_append(l, new_jval_i(3));</b>:
(or <b>dll_prepend(l, new_jval_i(3))</b> for that matter).
<pre>l -------------+--&gt; |-----------|  /-+-&gt;|-----------|
               |    | flink -------/ |  | flink ---------\
               |    | blink ---------/  | blink -------\ |
               |    | val = ?   |       | val.i = 3 |  | |
               |    |-----------|       |-----------|  | |
               |                                       | |
               \---------------------------------------+-/
</pre>
Actually, it makes the drawing cleaner to have the back links go backwards:
<pre>l -----------------&gt;|-----------|       |-----------|
               /---&gt;| flink -----------&gt;| flink ---------\
               |  /------ blink |&lt;----------- blink |&lt;-\ |
               |  | | val = ?   |       | val.i = 3 |  | |
               |  | |-----------|       |-----------|  | |
               |  |                                    | |
               |  \------------------------------------/ |
               |                                         |
               \-----------------------------------------/
</pre>
Here's that list after calling <b>dll_append(l, new_jval_i(5));</b>:
<pre>l ----------&gt;|-----------|       |-----------|       |-----------|
        /---&gt;| flink -----------&gt;| flink -----------&gt;| flink ---------\
        |  /------ blink |&lt;----------- blink |&lt;----------- blink |&lt;-\ |
        |  | | val = ?   |       | val.i = 3 |       | val.i = 5 |  | |
        |  | |-----------|       |-----------|       |-----------|  | |
        |  |                                                        | |
        |  \--------------------------------------------------------/ |
        |                                                             |
        \-------------------------------------------------------------/
</pre>

I won't go over more examples with ascii art.  You should be getting
the hang of this by now.
<p>
Many of the procedure implementations are trivial procedures or macros:
</p><pre><hr> 
Dllist new_dllist()
{
  Dllist d;

  d = (Dllist) malloc (sizeof(struct dllist));
  d-&gt;flink = d;
  d-&gt;blink = d;
  return d;
}
<hr>
dll_empty(Dllist l)
{
  return (l-&gt;flink == l);
}

<hr>
free_dllist(Dllist l)
{
  while (!dll_empty(l)) {
    dll_delete_node(dll_first(l));
  }
  free(l);
}
<hr>

#define dll_first(d) ((d)-&gt;flink)
#define dll_next(d) ((d)-&gt;flink)
#define dll_last(d) ((d)-&gt;blink)
#define dll_prev(d) ((d)-&gt;blink)
#define dll_nil(d) (d)

<hr>
</pre>
The only subtle pieces of code are <b>dll_insert_b()</b> and 
<b>dll_delete_node</b>.  With <b>dll_insert_b(n, v)</b> we
<b>malloc()</b> a new node, set its value to <b>v</b>, and then
link it into the list right before <b>n</b>.  This means that
we set the new node's <b>flink</b> field to <b>n</b>, and its
<b>blink</b> field to <b>n-&gt;blink</b>.  Then we set <b>n-&gt;blink</b>
to the new node, and the old <b>n-&gt;blink</b>'s <b>flink</b> field
to  the new node.  Here's the code:
<pre>dll_insert_b(Dllist node, Jval v)       /* Inserts before a given node */
{
  Dllist new;

  new = (Dllist) malloc (sizeof(struct dllist));
  new-&gt;val = v;

  new-&gt;flink = node;
  new-&gt;blink = node-&gt;blink;
  new-&gt;flink-&gt;blink = new;
  new-&gt;blink-&gt;flink = new;
}
</pre>

Once we have <b>dll_insert_b()</b> the other three list insertion 
routines are simply calls to <b>dll_insert_b()</b>:
<pre>dll_insert_a(Dllist n, Jval val)        /* Inserts after a given node */
{
  dll_insert_b(n-&gt;flink, val);
} 

dll_append(Dllist l, Jval val)     /* Inserts at the end of the list */
{ 
  dll_insert_b(l, val);
}

dll_prepend(Dllist l, Jval val)    /* Inserts at the beginning of the list */
{ 
  dll_insert_b(l-&gt;flink, val);
} 
</pre>

Deletion is pretty easy too.  First you must remove the node <b>n</b>'s
from the list by setting <b>n-&gt;flink-&gt;blink</b> to <b>n-&gt;blink</b>
and by setting <b>n-&gt;blink-&gt;flink</b> to <b>n-&gt;flink</b>.  Then
you free <b>n</b>:
<pre>dll_delete_node(Dllist node)            /* Deletes an arbitrary iterm */
{
  node-&gt;flink-&gt;blink = node-&gt;blink;
  node-&gt;blink-&gt;flink = node-&gt;flink;
  free(node);
}
</pre>

<h2>Usage examples</h2>

The first example is one of our standards: reversing standard 
input. This is simple enough to need no explanation.
It's in <a href="http://www.cs.utk.edu/%7Eplank/plank/classes/cs360/360/notes/Dllists/dllreverse.c"><b>dllreverse.c</b></a>:
<pre>#include &lt; stdio.h &gt;
#include &lt; string.h &gt;
#include "fields.h"
#include "dllist.h"

main()
{
  IS is;
  Dllist l;
  Dllist tmp;

  is = new_inputstruct(NULL);
  l = new_dllist();

  while (get_line(is) &gt;= 0) {
    dll_append(l, new_jval_s(strdup(is-&gt;text1)));
  }

  dll_rtraverse(tmp, l) printf("%s", jval_s(tmp-&gt;val));
}
</pre>

The second example is another standard: printing the last
<b>n</b> lines of standard input.  We do this by reading
standard input into a <b>Dllist</b>, and making sure that
the <b>Dllist</b> always has at most <b>n</b> nodes.  Then
we print it out:
The code is in <a href="http://www.cs.utk.edu/%7Eplank/plank/classes/cs360/360/notes/Dllists/dlltail.c"><b>dlltail.c</b></a>:
<pre>#include &lt; stdio.h &gt;
#include &lt; string.h &gt;
#include "fields.h"
#include "dllist.h"

main(int argc, char **argv)
{
  IS is;
  int n;
  Dllist l;
  Dllist tmp;

  if (argc != 2) {
    fprintf(stderr, "usage: dlltail n\n");
    exit(1);
  }
  n = atoi(argv[1]);
  if (n &lt; 0) {
    fprintf(stderr, "usage: dlltail n  -- n must be &gt;= 0\n");
    exit(1);
  }

  is = new_inputstruct(NULL);
  l = new_dllist();

  while (get_line(is) &gt;= 0) {
    dll_append(l, new_jval_s(strdup(is-&gt;text1)));
    if (is-&gt;line &gt; n) {
      tmp = dll_first(l);
      free(jval_s(dll_val(tmp)));
      dll_delete_node(tmp);
    }
  }

  dll_traverse(tmp, l) printf("%s", jval_s(tmp-&gt;val));
}
</pre></li></body></html>